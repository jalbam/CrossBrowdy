<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8" />
		<!-- <meta http-equiv="X-UA-Compatible" content="IE=7" /> -->
		<!-- <meta http-equiv="X-UA-Compatible" content="IE=EmulateIE7; IE=EmulateIE9"> -->
		<meta http-equiv="X-UA-Compatible" content="chrome=1" />

		<script src="../cordova.js"></script>          <!-- phantom library, needed for Cordova api calls, added during build -->
		<script src="../xdk/init-dev.js"></script>     <!-- normalizes device and document ready events, see README for details -->
		
		<title>CrossBrowdy - CB_Device test</title>

		<style>
			.mystyle
			{
				position: absolute;
				background-color: #0000aa;
				border: 0px;
				left:0px;
				top:0px;
			}
			#info
			{
				/*
				position:absolute;
				left:360px;
				top:2px;
				*/
				font-size:18px;
				background-color:#dddddd;
				padding:10px;
				border:1px dotted #222222;			
			}
			.dataInfo
			{
				display:inline;
				color:#005500;
				
			}
			button
			{
				font-size:14px;
				line-height:14px;
				height:32px;
				padding-left:10px;
				padding-right:10px;

				text-align:center;
				
				width:480px;

				border:1px dashed #00ff00;
				color:#ffbb00;
     			background-color:#aa0000;
			}
		</style>

		<!--[if lt IE 9]> 
			<script type="text/javascript" src="NO../CrossBrowdy/screen/canvas/FlashCanvas/bin/flashcanvas.js"></script>
		<![endif]-->
		<script type="text/javascript" src="../CrossBrowdy/CrossBrowdy.js"></script> <!-- CrossBrowdy by Joan Alba Maldonado (workindalian@gmail.com) -->
		<script type="text/javascript">
		<!--
			//Starts CrossBrowdy:
			function init()
			{
				CB_init(main, "../CrossBrowdy/"); //It will call main function when ready.
			}
			
			//This function called main will be called when CrossBrowdy is ready:
			function main()
			{
				//Sets the viewport tag:
				//CB_Screen.setViewport(900, null, true, null, null, null, null);
			
				//Show credits:
				CB_Elements.id("credits").innerHTML = CB_credits();

				var time = CB_Device.getTime();
				var dateObject = new Date(time);
				CB_Elements.id("time").innerHTML = time + " (" + dateObject.getHours() + ":" + (dateObject.getMinutes() < 10 ? "0" + dateObject.getMinutes() : dateObject.getMinutes()) + ":" + (dateObject.getSeconds() < 10 ? "0" + dateObject.getSeconds() : dateObject.getSeconds()) + " - " + "day " + dateObject.getDate() + ", month " + (dateObject.getMonth() + 1) + ", year " + dateObject.getFullYear() + ")";

				CB_Elements.id("location_supported").innerHTML = CB_Device.isLocationSupported() ? "YES" : "NO";
				
				CB_Device.getLocationKeepAwake(true);
				
				CB_Elements.id("vibration_supported").innerHTML = CB_Device.isVibrationSupported() ? "YES" : "NO";
				
				CB_Elements.id("battery_supported").innerHTML = CB_Device.isBatteryStatusAPISupported() ? "YES" : "NO";
				
				CB_Elements.id("ambient_light_supported").innerHTML = CB_Device.isAmbientLightSupported() ? "YES" : "NO";

				CB_Elements.id("proximity_supported").innerHTML = CB_Device.isProximitySupported() ? "YES" : "NO";

				CB_Elements.id("orientation_supported").innerHTML = CB_Device.isOrientationSupported() ? "YES" : "NO";

				CB_Elements.id("moz_orientation_supported").innerHTML = CB_Device.isMozOrientationSupported() ? "YES" : "NO";

				CB_Elements.id("motion_supported").innerHTML = CB_Device.isMotionSupported() ? "YES" : "NO";
				
				CB_Elements.id("compass_needs_calibration_supported").innerHTML = CB_Device.isCompassNeedsCalibrationSupported() ? "YES" : "NO";
				
				CB_Elements.id("compass_cordova_supported").innerHTML = CB_Device.isCompassCordovaSupported() ? "YES" : "NO";
				
				CB_Elements.id("acceleration_cordova_supported").innerHTML = CB_Device.isAccelerationCordovaSupported() ? "YES" : "NO";
				
				//Set events:
				setEvents();

				return;
			}

			//Cancel all events:
			function cancelEvents()
			{
				//Cancel all events:
				CB_Device.getLocationConstantlyDisable();
				CB_Device.getCompassConstantlyCordovaDisable()
				CB_Device.getAccelerationConstantlyCordovaDisable()
				
				//Clear all the intervals:
				
				
				return;
			}


			//Set all events:
			function setEvents()
			{
				//Cancel previous events first (if any):
				cancelEvents();

				//Set the events:
				var location_constantly_times = 0;
				CB_Device.getLocationConstantly(function(locationObject) { CB_console(locationObject); getObjectAsString(locationObject, "location_constantly"); CB_Elements.id("location_constantly_times").innerHTML = location_constantly_times++; }, function(error) { CB_Elements.id("location_constantly").innerHTML = "ERROR: " + getObjectAsString(error, null, true); CB_console(error); }, { timeout: 120000, enableHighAccuracy: true, maximumAge: 30000 });
				
				CB_Device.getLocation
				(
					function(locationObject)
					{
						getLocationOk(locationObject, "location")
						CB_Device.getLocation
						(
							function()
							{
								getLocationOk(locationObject, "location_accurated");
								var location_constantly_times_final = 0;
								CB_Device.getLocationConstantly(function(locationObject) { CB_console(locationObject); getObjectAsString(locationObject, "location_constantly_final"); CB_Elements.id("location_constantly_times_final").innerHTML = location_constantly_times_final++; }, function(error) { CB_Elements.id("location_constantly_final").innerHTML = "ERROR: " + getObjectAsString(error, null, true); CB_console(error); }, { timeout: 120000, enableHighAccuracy: true, maximumAge: 30000 });
							},
							function(error)
							{
								getLocationError(error, "location_accurated");
							},
							{
								timeout: 120000,
								enableHighAccuracy: true,
								maximumAge: 0
							},
							false
						);
					},
					function(error)
					{
						getLocationError(error, "location");
					},
					{
						timeout: 240000,
						enableHighAccuracy: false,
						maximumAge : 99960000
					}
				);
				
				CB_Device.getBattery(function(batteryObject) { CB_console(batteryObject); getObjectAsString(batteryObject, "battery_object"); });
				
				var isBatteryCharging = function(value) { CB_Elements.id("battery_charging").innerHTML = value; };
				CB_Device.isBatteryCharging();
				var getBatteryLevel = function(value) { CB_Elements.id("battery_level").innerHTML = value; };
				CB_Device.getBatteryLevel(getBatteryLevel);
				CB_Device.getBatteryChargingTime(function(value) { CB_Elements.id("battery_charging_time").innerHTML = value; });
				CB_Device.getBatteryDischargingTime(function(value) { CB_Elements.id("battery_discharging_time").innerHTML = value; });
				
				var battery_charging_times = battery_level_times = battery_charging_time_times = battery_discharging_time_times = 0;
				
				var onBatteryChargingChange = function(batteryObject, eventName) { CB_Elements.id("battery_charging_times").innerHTML = ++battery_charging_times; };
				CB_Device.onBatteryChargingChange(onBatteryChargingChange);
				
				var onBatteryLevelChange = function(batteryObject, eventName) { CB_Elements.id("battery_level_times").innerHTML = ++battery_level_times; };
				CB_Device.onBatteryLevelChange(onBatteryLevelChange);
				
				CB_Device.onBatteryChargingTimeChange(function(batteryObject, eventName) { CB_Elements.id("battery_charging_time_times").innerHTML = ++battery_charging_time_times; });
				CB_Device.onBatteryDischargingTimeChange(function(batteryObject, eventName) { CB_Elements.id("battery_discharging_time_times").innerHTML = ++battery_discharging_time_times; });

				var battery_status_cordova = battery_low_cordova = battery_critical_cordova = 0;
				CB_Device.onBatteryStatusCordova
				(
					function(batteryStatus)
					{
						CB_console(batteryStatus);
						CB_Elements.id("battery_status_cordova").innerHTML = battery_status_cordova++;
						getBatteryLevel(batteryStatus.level / 100);
						isBatteryCharging(batteryStatus.isPlugged);
					}
				);
				CB_Device.onBatteryLowCordova(function() { CB_Elements.id("battery_low_cordova").innerHTML = battery_low_cordova++; });
				CB_Device.onBatteryCriticalCordova(function() { CB_Elements.id("battery_critical_cordova").innerHTML = battery_critical_cordova++; });

				var ambient_light = proximity = orientation_change = on_motion = 0;
				var ambient_light_data = proximity_data = orientation_change_data = on_motion_data = 0;
				setInterval(function() { CB_Elements.id("ambient_light").innerHTML = ambient_light_data; }, 100);
				setInterval(function() { CB_Elements.id("proximity").innerHTML = proximity_data; }, 100);
				setInterval(function() { CB_Elements.id("orientation_change").innerHTML = orientation_change_data; }, 100);
				setInterval(function() { CB_Elements.id("on_motion").innerHTML = on_motion_data; }, 1000);
				
				CB_Device.getAmbientLight(function(data) { ambient_light_data = (++ambient_light) + "[value=" + data.value + "]"; }, false, false, function(error) { ambient_light_data = "ERROR: " + getObjectAsString(error, null, true, true); });
				
				CB_Device.getProximity(function(data) { proximity_data = (++proximity) + " [value=" + data.value + "]"; }, false, false, function(error) { proximity_data = "ERROR: " + getObjectAsString(error, null, true, true); });
				
				CB_Device.onOrientationChange
				(
					function(data)
					{
						orientation_change_data =
							(++orientation_change) +
							"<br />[<ul>alpha:" + data.alpha +
							"</ul><ul>beta:" + data.beta +
							"</ul><ul>gamma:" + data.gamma +
							"</ul><ul>absolute:" + data.absolute + "</ul>]";
					},
					false,
					false,
					function(error) { orientation_change_data = "ERROR: " + getObjectAsString(error, null, true, true); }
				);
				
				CB_Device.onMotion
				(
					function(data)
					{
						on_motion_data =
							(++on_motion) +
							"<br />[<ul>acceleration.x:"  + data.acceleration.x +
							"</ul><ul>acceleration.y:"  + data.acceleration.y +
							"</ul><ul>acceleration.z:"  + data.acceleration.z +
							"</ul><br /><ul>accelerationIncludingGravity.x:"  + data.accelerationIncludingGravity.x +
							"</ul><ul>accelerationIncludingGravity.y:"  + data.accelerationIncludingGravity.y +
							"</ul><ul>accelerationIncludingGravity.z:"  + data.accelerationIncludingGravity.z +
							"</ul><br /><ul>interval:"  + data.interval +
							"</ul><br /><ul>rotationRate.alpha:"  + data.rotationRate.alpha +
							"</ul><ul>rotationRate.beta:"  + data.rotationRate.beta +
							"</ul><ul>rotationRate.gamma:"  + data.rotationRate.gamma + "</ul>]";
					},
					false,
					false,
					function(error) { on_motion_data = "ERROR: " + getObjectAsString(error, null, true, true); }
				);
				
				var compass_needs_calibration_times = 0;
				CB_Device.onCompassNeedsCalibration(function(event) { CB_console(event); getObjectAsString(event, "compass_needs_calibration"); CB_Elements.id("compass_needs_calibration_times").innerHTML = compass_needs_calibration_times++; });

				var compass_cordova = compass_cordova_constantly = acceleration_cordova = acceleration_cordova_constantly = 0;
				var compass_cordova_data = compass_cordova_constantly_data = acceleration_cordova_data = acceleration_cordova_constantly_data = 0;
				setInterval(function() { CB_Elements.id("compass_cordova").innerHTML = compass_cordova_data; }, 100);
				setInterval(function() { CB_Elements.id("compass_cordova_constantly").innerHTML = compass_cordova_constantly_data; }, 100);
				setInterval(function() { CB_Elements.id("acceleration_cordova").innerHTML = acceleration_cordova_data; }, 100);
				setInterval(function() { CB_Elements.id("acceleration_cordova_constantly").innerHTML = acceleration_cordova_constantly_data; }, 1000);
				
				CB_Device.getCompassCordova(function(data) { compass_cordova_data = (++compass_cordova) + "[magneticHeading=" + data.magneticHeading + ", trueHeading=" + data.trueHeading + ", headingAccuracy=" + data.headingAccuracy + ", timestamp=" + data.timestamp + "]"; }, function(error) { compass_cordova_data = "ERROR: " + getObjectAsString(error, null, true, true); });
				CB_Device.getCompassConstantlyCordova(function(data) { compass_cordova_constantly_data = (++compass_cordova_constantly) + "[magneticHeading=" + data.magneticHeading + ", trueHeading=" + data.trueHeading + ", headingAccuracy=" + data.headingAccuracy + ", timestamp=" + data.timestamp + "]"; }, function(error) { compass_cordova_constantly_data = "ERROR: " + getObjectAsString(error, null, true, true); });
				
				CB_Device.getAccelerationCordova(function(data) { acceleration_cordova_data = (++acceleration_cordova) + "[x=" + data.x + ", y=" + data.y + ", z=" + data.z + ", timestamp=" + data.timestamp + "] [" + getObjectAsString(CB_Device.getAccelerationNormalizedCordova(data), null, true, false) + "]"; }, function(error) { acceleration_cordova_data = "ERROR: " + getObjectAsString(error, null, true, true); });
				CB_Device.getAccelerationConstantlyCordova(function(data) { acceleration_cordova_constantly_data = (++acceleration_cordova_constantly) + "[x=" + data.x + ", y=" + data.y + ", z=" + data.z + ", timestamp=" + data.timestamp + "] [" + getObjectAsString(CB_Device.getAccelerationNormalizedCordova(data), null, true, false) + "]"; }, function(error) { acceleration_cordova_constantly_data = "ERROR: " + getObjectAsString(error, null, true, true); });
				
				return;
			}
			
			
			function getLocationOk(locationObject, elementId)
			{
				CB_console(locationObject);
				getObjectAsString(locationObject, elementId);
			}


			function getLocationError(error, elementId)
			{
				CB_console(error);
				CB_Elements.id("location").innerHTML = "ERROR: " + getObjectAsString(error, null, true);
			}
			
			
			function getObjectAsString(desiredObject, elementId, avoidPrinting, avoidRecursive)
			{
				var info = "{ ";
				for (var property in desiredObject)
				{
					if (CB_Arrays.sizeof(desiredObject[property]) === 0 || CB_isString(desiredObject[property]))
					{
						info += property + ": " + desiredObject[property] + ", ";
					}
					else if (!avoidRecursive)
					{
						info += property + ": " + getObjectAsString(desiredObject[property], elementId, true) + ", ";
					}
				}
				info = CB_rtrim(info, ", ");
				info += " }";
				if (!avoidPrinting) { CB_Elements.id(elementId).innerHTML = info; }
				return info;
			}

			
			var vibrateConstantlyInterval = null;
			function vibrateConstantly()
			{
				vibrateStop();
				vibrateConstantlyInterval = setInterval(function() { CB_Device.vibrate(2000) }, 1500);
			}
			
			function vibrate(vibration)
			{
				vibrateStop();
				return CB_Device.vibrate(vibration);
			}
			
			
			function vibrateStop()
			{
				clearInterval(vibrateConstantlyInterval);
				return CB_Device.vibrateStop();
			}
			
		// -->
		</script>
		
	</head>
	<body bgcolor="#ffaadd" onload="init();">
		<div id="info">
			<div style="font-size:30px; color:red; text-align:center;">CrossBrowdy - CB_Device test</div>
			<br />
			<center><a href="index.htm">Go back</a></center>
			<br />
			<div id="changeColor" style="font-size:16px; text-align:center;">This is a device test</div>
			<br />
			<div style="text-align:center;"><button onClick="cancelEvents(); alert('All events stopped');">Cancel events</button></div>
			<br />
			<div style="text-align:center;"><button onClick="setEvents(); alert('All events started');">Set events</button></div>
			<br />
			<br />
			Time: <div id="time" class="dataInfo"></div>
			<br />
			<br />
			Location supported: <div id="location_supported" class="dataInfo"></div>
			<br />
			Location: <div id="location" class="dataInfo"></div>
			<br />
			Location (high accurancy): <div id="location_accurated" class="dataInfo"></div>
			<br />
			Location constantly: <div id="location_constantly" class="dataInfo"></div> [<div id="location_constantly_times" class="dataInfo">0</div> times fired]
			<br />
			Location constantly (last event set): <div id="location_constantly_final" class="dataInfo"></div> [<div id="location_constantly_times_final" class="dataInfo">0</div> times fired]
			<br />
			<br />
			Vibration supported: <div id="vibration_supported" class="dataInfo"></div>
			<br />
			<button onClick="vibrateConstantly();">Vibrate constantly</button>
			<br />
			<button onClick="vibrate(2000);">Vibrate 2 seconds</button>
			<br />
			<button onClick="vibrate([1000, 1000,		800, 800,		600, 600,		400, 400,		200, 200,		100, 100, 		50, 50, 	10, 10, 	1, 1, 	20, 20, 	300, 300, 	500, 500,	700, 700,	900, 900 ]);">Vibrate with pattern</button>
			<br />
			<button onClick="vibrateStop();">Stop vibrating</button>
			<br />
			<br />
			Battery management supported: <div id="battery_supported" class="dataInfo"></div>
			<br />
			Battery object: <div id="battery_object" class="dataInfo"></div>
			<br />
			Battery charging: <div id="battery_charging" class="dataInfo"></div> [<div id="battery_charging_times" class="dataInfo">0</div> times fired]
			<br />
			Battery level: <div id="battery_level" class="dataInfo"></div> [<div id="battery_level_times" class="dataInfo">0</div> times fired]
			<br />
			Battery charging time: <div id="battery_charging_time" class="dataInfo"></div> [<div id="battery_charging_time_times" class="dataInfo">0</div> times fired]
			<br />
			Battery discharging time: <div id="battery_discharging_time" class="dataInfo"></div> [<div id="battery_discharging_time_times" class="dataInfo">0</div> times fired]
			<br />
			Battery status event, times fired (Apache Cordova): <div id="battery_status_cordova" class="dataInfo">0</div>
			<br />
			Battery low event, times fired (Apache Cordova): <div id="battery_low_cordova" class="dataInfo">0</div>
			<br />
			Battery critical event, times fired (Apache Cordova): <div id="battery_critical_cordova" class="dataInfo">0</div>
			<br />
			<br />
			Ambient light supported: <div id="ambient_light_supported" class="dataInfo"></div>
			<br />
			Ambient light, times fired: <div id="ambient_light" class="dataInfo">0</div>
			<br />
			<br />
			Proximity sensor supported: <div id="proximity_supported" class="dataInfo"></div>
			<br />
			Proximity sensor, times fired: <div id="proximity" class="dataInfo">0</div>
			<br />
			<br />
			Orientation supported: <div id="orientation_supported" class="dataInfo"></div>
			<br />
			MozOrientation supported: <div id="moz_orientation_supported" class="dataInfo"></div>
			<br />
			Orientation, times fired: <div id="orientation_change" class="dataInfo">0</div>
			<br />
			<br />
			Motion supported: <div id="motion_supported" class="dataInfo"></div>
			<br />
			Motion, times fired: <div id="on_motion" class="dataInfo">0</div>
			<br />
			<br />
			Compass needs calibration event supported: <div id="compass_needs_calibration_supported" class="dataInfo"></div> [<div id="compass_needs_calibration_times" class="dataInfo">0</div> times fired]
			<br />
			Compass needs calibration event: <div id="compass_needs_calibration" class="dataInfo"></div>
			<br />
			<br />
			Compass event supported (Apache Cordova): <div id="compass_cordova_supported" class="dataInfo"></div>
			<br />
			Compass event (Apache Cordova), times fired: <div id="compass_cordova" class="dataInfo"></div>
			<br />
			Compass event constantly (Apache Cordova), times fired: <div id="compass_cordova_constantly" class="dataInfo"></div>
			<br />
			<br />
			Acceleration event supported (Apache Cordova): <div id="acceleration_cordova_supported" class="dataInfo"></div>
			<br />
			Acceleration event (Apache Cordova), times fired: <div id="acceleration_cordova" class="dataInfo"></div>
			<br />
			Acceleration event constantly (Apache Cordova), times fired: <div id="acceleration_cordova_constantly" class="dataInfo"></div>
			<br />
			<br />
			<br />
			<div id="credits" style="font-size:12px; color:#aa0000; text-align:left;">CrossBrowdy by Joan Alba Maldonado</div>
			<div id="CB_console" style="display:none; visibility:hidden; font-size:12px; text-align:left; width:100%; height:200px; overflow:scroll;"><span style="font-weight:bold;">Console:</span><br /></div>
		</div>
	</body>
</html>