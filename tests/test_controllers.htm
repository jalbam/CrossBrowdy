<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8" />
		<!-- <meta http-equiv="X-UA-Compatible" content="IE=7" /> -->
		<!-- <meta http-equiv="X-UA-Compatible" content="IE=EmulateIE7; IE=EmulateIE9"> -->
		<meta http-equiv="X-UA-Compatible" content="chrome=1" />

		<script src="../cordova.js"></script>          <!-- phantom library, needed for Cordova api calls, added during build -->
		<script src="../xdk/init-dev.js"></script>     <!-- normalizes device and document ready events, see README for details -->
		
		<title>CrossBrowdy - Controllers test</title>

		<style>
			.mystyle
			{
				position: absolute;
				background-color: #0000aa;
				border: 0px;
				left:0px;
				top:0px;
			}
			#info
			{
				/*
				position:absolute;
				left:360px;
				top:2px;
				*/
				font-size:18px;
				background-color:#dddddd;
				padding:10px;
				border:1px dotted #222222;			
			}
			.dataInfo
			{
				display:inline;
				color:#005500;
				
			}
			button
			{
				font-size:14px;
				line-height:14px;
				height:32px;
				padding-left:10px;
				padding-right:10px;

				text-align:center;
				
				width:480px;

				border:1px dashed #00ff00;
				color:#ffbb00;
     			background-color:#aa0000;
			}
		</style>

		<!--[if lt IE 9]> 
			<script type="text/javascript" src="NO../CrossBrowdy/screen/canvas/FlashCanvas/bin/flashcanvas.js"></script>
		<![endif]-->
		<script type="text/javascript" src="../CrossBrowdy/CrossBrowdy.js"></script> <!-- CrossBrowdy by Joan Alba Maldonado (workindalian@gmail.com) -->
		<script type="text/javascript">
		<!--
			//Starts CrossBrowdy:
			function init()
			{
				CB_init(main, "../CrossBrowdy/"); //It will call main function when ready.
			}
			
			
			//This function called main will be called when CrossBrowdy is ready:
			function main()
			{
				//Sets the viewport tag:
				CB_Screen.setViewport(900, null, true, null, null, null, null);
			
				//Show credits:
				CB_Elements.id("credits").innerHTML = CB_credits();

				CB_Controllers.onConnect(gamepadConnected, false);
				CB_Controllers.onDisconnect(gamepadDisconnected, false);

				showGamepads();
				//showGamepadsButtonsPressed();
				
				return;
			}

			
			function showGamepads()
			{
				var gamepads = CB_Controllers.getGamePads(false);
				var gamepadsString = "";
				for (var proprietaryId in gamepads)
				{
					if (proprietaryId === "standard") { continue; }
					gamepadsString += "<br />" + proprietaryId  + ":<ul>" + getObjectAsString(gamepads[proprietaryId]) + "</ul>";
				}
				if (CB_Elements.id("gamepads_with_proprietary").innerHTML !== gamepadsString) { CB_Elements.id("gamepads_with_proprietary").innerHTML = gamepadsString; }
				
				gamepads = CB_Controllers.getGamePads(true);
				var gamepadsString = "";
				for (var x in gamepads)
				{
					gamepadsString += "<br />GAMEPAD #" + gamepads[x].index  + " (" + gamepads[x].id + "):<ul>" + getObjectAsString(gamepads[x], ["index", "id", "connected", "axes", "buttons", "mapping", "timestamp", "vibrationActuator"]) + "</ul>";
				}
				
				if (CB_Elements.id("gamepads").innerHTML !== gamepadsString) { CB_Elements.id("gamepads").innerHTML = gamepadsString; }
				
				setTimeout(showGamepads, 10);
			}
			
			
			function showGamepadsButtonsPressed()
			{
				var gamepadsButtonsPressedString = "";
				var buttonsToCheck = 100;
				
				gamepadsButtonsPressedString += "Searching from 0 to " + buttonsToCheck + " button IDs";
				
				gamepadsButtonsPressedString += "<br />All gamepads: ";
				for (var x = 0; x < buttonsToCheck; x++)
				{
					if (CB_Controllers.isButtonDown(x)) { gamepadsButtonsPressedString += x + ", "; }
				}
				gamepadsButtonsPressedString = CB_trim(gamepadsButtonsPressedString, [",", " "]);

				var gamepads = CB_Controllers.getGamePads(true);
				for (var x in gamepads)
				{
					gamepadsButtonsPressedString += "<br />Gamepad #" + x + " (" + gamepads[x].id + "): ";
					for (var y = 0; y < buttonsToCheck; y++)
					{
						//if (CB_Controllers.isButtonDown(y, gamepads[x].id)) { gamepadsButtonsPressedString += y + ", "; }
						if (CB_Controllers.isButtonDown(y, x, false, true)) { gamepadsButtonsPressedString += y + ", "; }
					}
					gamepadsButtonsPressedString = CB_trim(gamepadsButtonsPressedString, [",", " "]);
				}
			
				if (CB_Elements.id("gamepads_buttons_pressed").innerHTML !== gamepadsButtonsPressedString) { CB_Elements.id("gamepads_buttons_pressed").innerHTML = gamepadsButtonsPressedString; }
				
				setTimeout(showGamepadsButtonsPressed, 10);
			}
			
			
			//Returns an object as a string (for those browsers without JSON.stringify support or when we want to have a limit of levels):
			function getObjectAsString(desiredObject, desiredProperties, avoidRecursive, levelMax, levelCurrent)
			{
				var info = "{ ";
				
				if (typeof(levelMax) === "undefined" || levelMax === null || isNaN(levelMax)) { levelMax = 6; }
				if (typeof(levelCurrent) === "undefined" || levelCurrent === null || isNaN(levelCurrent)) { levelCurrent = 0; }
				if (!avoidRecursive && levelCurrent >= levelMax) { return "..."; }
				
				if (!isNaN(desiredObject)) { return desiredObject; }
				
				var n = 0;
				for (var property in desiredObject)
				{
					if (levelCurrent === 0 && CB_isArray(desiredProperties) && CB_Arrays.indexOf(desiredProperties, property) === -1) { continue; }
					
					if (property === "__proto__") { continue; }
					else if (property === "prototype") { continue; }
					//else if (!desiredObject.hasOwnProperty(property)) { continue; }
					
					if (desiredObject[property] === true) { info += property + ": true, "; }
					else if (desiredObject[property] === false) { info += property + ": false, "; }
					else if (!isNaN(desiredObject[property])) { info += property + ": " + desiredObject[property] + ", "; }
					else if (CB_isArray(desiredObject[property]))
					{
						info += property + ": [ ";
						for (var x = 0; x < desiredObject[property].length; x++)
						{
							if (CB_sizeOf(desiredObject[property][x]) !== 0 && !avoidRecursive && levelCurrent < levelMax) { info += getObjectAsString(desiredObject[property][x], desiredProperties, avoidRecursive, levelMax, levelCurrent + 1) + ", "; }
							else { info += desiredObject[property][x] + ", "; }
						}
						info = CB_rtrim(info, [" ", ","]);
						info += " ], ";
					}
					else if (CB_isString(desiredObject[property]))
					{
						info += property + ": '" + desiredObject[property] + "', ";
					}
					else if (CB_sizeOf(desiredObject[property], true) === 0 || !isNaN(desiredObject[property]))
					{
						info += property + ": " + desiredObject[property] + ", ";
					}
					else if (!avoidRecursive && levelCurrent < levelMax && desiredObject.hasOwnProperty(property))
					{
						info += property + ": " + getObjectAsString(desiredObject[property], desiredProperties, avoidRecursive, levelMax, levelCurrent + 1) + ", ";
					}
					
					n++;
					if (n > 30) { break; }
				}
				
				if (info.substring(info.length - 2) === ", ") { info = info.substring(0, info.length - 2); }
				
				info += " }";
				return info;
			}
			
			
			var gamepadConnectedDisconnectedHideMessageTimeout = null;
			function gamepadConnected(gamepad)
			{
				clearTimeout(gamepadConnectedDisconnectedHideMessageTimeout);
				CB_console("Gamepad #" + gamepad.index + " (" + gamepad.id + ") connected!"); 
				CB_Elements.insertContentById
				(
					"gamepad_connected_disconnected", //container
					CB_Elements.id("gamepad_connected_disconnected").innerHTML + "<br />Gamepad #" + gamepad.index + " (" + gamepad.id + ") connected!", //content
					"block", //display
					false, //checkValues
					true, //computed
					undefined, //onContentWritten
					function() //onShow:
					{
						gamepadConnectedDisconnectedHideMessageTimeout = setTimeout
						(
							function() { CB_Elements.id("gamepad_connected_disconnected").innerHTML = ""; CB_Elements.hideById("gamepad_connected_disconnected"); },
							2000
						);
					}
				);
				showGamepads();
			}

			
			function gamepadDisconnected(gamepad)
			{
				clearTimeout(gamepadConnectedDisconnectedHideMessageTimeout);
				CB_console("Gamepad #" + gamepad.index + " (" + gamepad.id + ") disconnected!");
				CB_Elements.insertContentById
				(
					"gamepad_connected_disconnected", //container
					CB_Elements.id("gamepad_connected_disconnected").innerHTML + "<br />Gamepad #" + gamepad.index + " (" + gamepad.id + ") disconnected!", //content
					"block", //display
					false, //checkValues
					true, //computed
					undefined, //onContentWritten
					function() //onShow:
					{
						gamepadConnectedDisconnectedHideMessageTimeout = setTimeout
						(
							function() { CB_Elements.id("gamepad_connected_disconnected").innerHTML = ""; CB_Elements.hideById("gamepad_connected_disconnected"); },
							2000
						);
					}
				);
				showGamepads();
			}
			

		// -->
		</script>
		
	</head>
	<body bgcolor="#ffaadd" onload="init();">
		<div id="info">
			<div style="font-size:30px; color:red; text-align:center;">CrossBrowdy - Controllers test</div>
			<br />
			<center><a href="index.htm">Go back</a></center>
			<br />
			<div id="changeColor" style="font-size:16px; text-align:center;">This is a Controllers test</div>
			<br />
			<br />
			<div id="gamepad_connected_disconnected" class="dataInfo" style="visibility:hidden;"></div>
			<br />
			<br />
			GamePads: <div id="gamepads" class="dataInfo"></div>
			<br />
			<br />
			Buttons pressed in GamePads: <div id="gamepads_buttons_pressed" class="dataInfo"></div>
			<br />
			<br />
			Proprietary gamepads: <div id="gamepads_with_proprietary" class="dataInfo"></div>
			<br />
			<br />
			<div id="credits" style="font-size:12px; color:#aa0000; text-align:left;">CrossBrowdy by Joan Alba Maldonado</div>
			<div id="CB_console" style="display:none; visibility:hidden; font-size:12px; text-align:left; width:100%; height:200px; overflow:scroll;"><span style="font-weight:bold;">Console:</span><br /></div>
		</div>
	</body>
</html>